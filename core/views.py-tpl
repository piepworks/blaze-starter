from django.shortcuts import get_object_or_404, render, redirect
from django.contrib.auth import login
from django.conf import settings
from django.urls import reverse
from django.http import FileResponse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.cache import cache_control
from django.views.decorators.http import require_GET
from django.utils.decorators import method_decorator
from django_registration.backends.activation.views import (
    ActivationView as BaseActivationView,
    RegistrationView as BaseRegistrationView,
)
from honeypot.decorators import check_honeypot
from .utils import send_email_to_admin
from .models import User


def placeholder(request):
    context = {}
    return render(request, "placeholder.html", context)


@login_required
def private_page(request):
    context = {}
    return render(request, "private.html", context)


@require_GET
@cache_control(max_age=60 * 60 * 24, immutable=True, public=True)  # One day
def favicon(request):
    file = (settings.BASE_DIR / "static" / "img" / "seahorse-64x64.png").open("rb")
    return FileResponse(file)


def account_verified(request, user_id):
    user = get_object_or_404(User, id=user_id)

    send_email_to_admin(
        subject=f"New user: {user.email}",
        message="EOM",
    )

    login(request, user)
    messages.success(request, "Your account has been activated! Enjoy!")
    return redirect("index")


class ActivationView(BaseActivationView):
    def get_success_url(self, user):
        return reverse("account-verified", args=(user.id,))


@method_decorator(check_honeypot, name="post")
class RegistrationView(BaseRegistrationView):
    def get(self, request, *args, **kwargs):
        if self.request.user.is_authenticated:
            return redirect("index")
        return super().get(request, *args, **kwargs)
